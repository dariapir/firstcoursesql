Далее разберем более практические метрики - например маркетинговые и т.д.

1. Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:
Число новых пользователей.
Число новых курьеров.
Общее число пользователей на текущий день.
Общее число курьеров на текущий день.

SELECT DISTINCT t.date,
                new_users,
                new_couriers,
                sum(new_users) OVER(ORDER BY t.date):: integer as total_users,
                sum(new_couriers) OVER(ORDER BY t.date):: integer as total_couriers
FROM   (SELECT date,
               count(user_id) as new_users
        FROM   (SELECT DISTINCT user_id,
                                min(time) OVER (PARTITION BY user_id):: date as date
                FROM   user_actions) as t1
        GROUP BY date
        ORDER BY date) as t left join (SELECT date,
                                      count(courier_id) as new_couriers
                               FROM   (SELECT DISTINCT courier_id,
                                                       min(time) OVER (PARTITION BY courier_id):: date as date
                                       FROM   courier_actions) as t2
                               GROUP BY date
                               ORDER BY date) as t3
        ON t.date = t3.date

2. Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:
Число платящих пользователей.
Число активных курьеров.
Долю платящих пользователей в общем числе пользователей на текущий день.
Долю активных курьеров в общем числе курьеров на текущий день.

SELECT t7.date, paying_users, active_couriers,
ROUND(100*paying_users::DECIMAL/total_users, 2) AS paying_users_share,
ROUND(100*active_couriers::DECIMAL/total_couriers, 2) AS active_couriers_share
FROM
    (SELECT t4.date,  new_users,
               new_couriers,
    SUM(new_users) OVER(ORDER BY t6.date rows between unbounded preceding and current row):: INTEGER AS total_users,
    SUM(new_couriers) OVER(ORDER BY t4.date rows between unbounded preceding and current row):: INTEGER AS total_couriers   
    FROM
        (SELECT date, COUNT(courier_id) AS new_couriers FROM
        (SELECT DISTINCT courier_id, MIN(time) OVER (PARTITION BY courier_id):: DATE AS date FROM courier_actions) AS t3
        GROUP BY date) AS t4
     LEFT JOIN
        (SELECT date, COUNT(user_id) AS new_users FROM
        (SELECT DISTINCT user_id, MIN(time) OVER (PARTITION BY user_id):: DATE AS date FROM user_actions) AS t5
        GROUP BY date) AS t6
    ON t4.date = t6.date ) AS t7   

LEFT JOIN (SELECT time::date AS date, COUNT(DISTINCT user_id) AS paying_users
        FROM user_actions
                WHERE order_id NOT IN
                    (SELECT order_id FROM user_actions
                    WHERE action = 'cancel_order')
                GROUP BY date) AS t1
ON t7.date= t1.date                 
LEFT JOIN 
                (SELECT time::date AS date, COUNT(DISTINCT courier_id) AS active_couriers
                    FROM courier_actions
                    WHERE order_id NOT IN
                        (SELECT order_id FROM user_actions
                        WHERE action = 'cancel_order')
                GROUP BY date) AS t2
ON t7.date= t2.date                

3. Для каждого дня, представленного в таблице user_actions, рассчитайте следующие показатели:
Общее число заказов.
Число первых заказов (заказов, сделанных пользователями впервые).
Число заказов новых пользователей (заказов, сделанных пользователями в тот же день, когда они впервые воспользовались сервисом).
Долю первых заказов в общем числе заказов (долю п.2 в п.1).
Долю заказов новых пользователей в общем числе заказов (долю п.3 в п.1).

SELECT t1.date, orders, first_orders, new_users_orders,
ROUND(100*first_orders::DECIMAL / orders ,2) AS first_orders_share,
ROUND(100* new_users_orders::DECIMAL / orders,2) AS new_users_orders_share
FROM
(SELECT DISTINCT time::DATE AS date, COUNT(order_id) OVER (PARTITION BY time::DATE) AS orders
FROM user_actions
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t1
LEFT JOIN 
(SELECT DISTINCT date(time) as date,
                count(order_id) FILTER (WHERE order_type = 1)  as first_orders
FROM   (SELECT order_id,
               time,
               row_number() OVER(PARTITION BY user_id
               ORDER BY time) AS order_type
        FROM   user_actions
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')) as t
GROUP BY date) AS t2
ON t1.date = t2.date
LEFT JOIN (SELECT
t3.date, count(order_id) as new_users_orders
FROM
    (SELECT min(time::date) as date, user_id
        FROM user_actions
        GROUP BY user_id
    ) as t3 
LEFT JOIN
    (SELECT time::date as date, user_id, order_id
        FROM user_actions
        WHERE order_id NOT IN 
        (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    ) as t4 
ON t3.user_id = t4.user_id and t3.date = t4.date
    GROUP BY t3.date) as t5
ON t1.date = t5.date

ORDER BY date

4. На основе данных в таблице courier_actions для каждого дня рассчитайте, за сколько минут в среднем курьеры доставляли свои заказы.

SELECT  max AS date, AVG(minute)::INTEGER AS minutes_to_deliver
FROM
(SELECT order_id, min(time)::DATE AS min,  
max(time)::DATE AS max,  
extract(epoch FROM max(time) - min(time))/60 AS minute
FROM courier_actions
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')
GROUP BY order_id
ORDER BY order_id) AS t1
GROUP BY date
ORDER BY date

5. Для каждого дня в таблицах orders и user_actions рассчитайте следующие показатели:

Выручку на пользователя (ARPU) за текущий день.
Выручку на платящего пользователя (ARPPU) за текущий день.
Выручку с заказа, или средний чек (AOV) за текущий день.

SELECT  t4.date,  ROUND(revenue/users_pdays, 2) AS arpu,  ROUND(revenue / paying_people,2) AS arppu, 
ROUND(revenue/count_orders,2) AS aov
FROM
(SELECT t1.date, SUM(price) AS revenue, users_pdays, COUNT(DISTINCT t2.user_id) AS paying_people, COUNT(DISTINCT t1.order_id) AS count_orders
FROM
(SELECT order_id, creation_time::DATE AS date, unnest(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t1
LEFT JOIN
products
ON t1. product_id = products.product_id
LEFT JOIN
(SELECT time::DATE AS date, COUNT(DISTINCT user_id) AS users_pdays
FROM
(SELECT DISTINCT user_id, order_id, action, time
FROM user_actions
ORDER BY time, user_id) AS t4
GROUP BY date) AS t3
ON t1.date = t3.date
LEFT JOIN
(SELECT user_id, order_id,time::DATE AS date FROM user_actions) AS t2
ON t1.order_id = t2.order_id
GROUP BY t1.date, users_pdays) AS t4

6. Для каждого дня недели в таблицах orders и user_actions рассчитайте следующие показатели:
Выручку на пользователя (ARPU).
Выручку на платящего пользователя (ARPPU).
Выручку на заказ (AOV).

SELECT  weekday, weekday_number,  ROUND(revenue/users_pdays, 2) AS arpu,  ROUND(revenue / paying_people,2) AS arppu, 
ROUND(revenue/count_orders,2) AS aov
FROM
(SELECT weekday, t1.weekday_number, SUM(price) AS revenue, users_pdays, COUNT(DISTINCT t2.user_id) AS paying_people, COUNT(DISTINCT t1.order_id) AS count_orders
FROM
(SELECT order_id, to_char(creation_time, 'Day') AS weekday, DATE_PART('isodow', creation_time) AS weekday_number, unnest(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')
AND creation_time::DATE BETWEEN '2022-08-26' AND '2022-09-08') AS t1
LEFT JOIN
products
ON t1. product_id = products.product_id
LEFT JOIN
(SELECT DATE_PART('isodow', time) AS weekday_number, COUNT(DISTINCT user_id) AS users_pdays
FROM
(SELECT DISTINCT user_id, order_id, action, time
FROM user_actions
WHERE time::DATE BETWEEN '2022-08-26' AND '2022-09-09'
ORDER BY time, user_id) AS t4
GROUP BY weekday_number) AS t3
ON t1.weekday_number = t3.weekday_number
LEFT JOIN
(SELECT user_id, order_id,DATE_PART('isodow', time) AS weekday_number FROM user_actions) AS t2
ON t1.order_id = t2.order_id
GROUP BY weekday, t1.weekday_number, users_pdays) AS t4
ORDER BY weekday_number

7. Для каждого товара, представленного в таблице products, за весь период времени в таблице orders рассчитайте следующие показатели:
Суммарную выручку, полученную от продажи этого товара за весь период.
Долю выручки от продажи этого товара в общей выручке, полученной за весь период.
Товары, округлённая доля которых в выручке составляет менее 0.5%, объедините в общую группу с названием «ДРУГОЕ» (без кавычек), просуммировав округлённые доли этих товаров.

SELECT product_name , SUM(revenue)  AS revenue, SUM(share) AS share_in_revenue
FROM
(SELECT  CASE
WHEN ROUND(100*revenue / SUM(revenue) OVER(),2) < 0.5 THEN 'ДРУГОЕ'
ELSE name
END AS product_name,
SUM(revenue) OVER (PARTITION BY name) AS revenue, ROUND(100*revenue / SUM(revenue) OVER(),2) AS share
FROM
(SELECT DISTINCT name, SUM(price) OVER (PARTITION BY name) AS revenue
FROM
(SELECT order_id, unnest(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t1
LEFT JOIN
products
ON t1. product_id = products.product_id) AS t2
) AS t3
GROUP BY product_name
ORDER BY revenue DESC

8. Для каждого дня в таблицах orders и courier_actions рассчитайте следующие показатели:
Выручку, полученную в этот день.
Затраты, образовавшиеся в этот день.
Сумму НДС с продажи товаров в этот день.
Валовую прибыль в этот день (выручка за вычетом затрат и НДС).
Суммарную выручку на текущий день.
Суммарные затраты на текущий день.
Суммарный НДС на текущий день.
Суммарную валовую прибыль на текущий день.
Долю валовой прибыли в выручке за этот день (долю п.4 в п.1).
Долю суммарной валовой прибыли в суммарной выручке на текущий день (долю п.8 в п.5).

Чтобы посчитать затраты, в этой задаче введём дополнительные условия.
В упрощённом виде затраты нашего сервиса будем считать как сумму постоянных и переменных издержек. К постоянным издержкам отнесём аренду складских помещений, 
а к переменным — стоимость сборки и доставки заказа. Таким образом, переменные затраты будут напрямую зависеть от числа заказов.
Из данных, которые нам предоставил финансовый отдел, известно, что в августе 2022 года постоянные затраты составляли 120 000 рублей в день. 
Однако уже в сентябре нашему сервису потребовались дополнительные помещения, и поэтому постоянные затраты возросли до 150 000 рублей в день.
Также известно, что в августе 2022 года сборка одного заказа обходилась нам в 140 рублей, при этом курьерам мы платили по 150 рублей за один доставленный заказ 
и ещё 400 рублей ежедневно в качестве бонуса, если курьер доставлял не менее 5 заказов в день. В сентябре продакт-менеджерам удалось снизить затраты на сборку заказа до 115 рублей, 
но при этом пришлось повысить бонусную выплату за доставку 5 и более заказов до 500 рублей, чтобы обеспечить более конкурентоспособные условия труда. 
При этом в сентябре выплата курьерам за один доставленный заказ осталась неизменной.

При расчёте НДС учитывайте, что для некоторых товаров налог составляет 10%, а не 20%.

SELECT date,
       revenue,
       costs,
       tax,
       gross_profit,
       total_revenue,
       total_costs,
       total_tax,
       total_gross_profit,
       round(gross_profit / revenue * 100, 2) as gross_profit_ratio,
       round(total_gross_profit / total_revenue * 100, 2) as total_gross_profit_ratio
FROM        
(SELECT date, revenue, costs, tax, revenue-(tax+costs) AS gross_profit,
SUM(revenue) OVER (ORDER BY date) AS total_revenue, SUM(costs) OVER (ORDER BY date) AS total_costs,
SUM(tax) OVER (ORDER BY date) AS total_tax,
SUM(revenue-(tax+costs)) OVER (ORDER BY date) as total_gross_profit
FROM
(SELECT t1.date, SUM(price) AS revenue, 
CASE WHEN DATE_PART('month' , t1.date) = 8 THEN 120000.0 + coalesce(count_orders, 0) * 140 + coalesce(c_delivery, 0) *150 + coalesce(count_bonus, 0) *400
ELSE 150000 + coalesce(count_orders, 0) * 115 + coalesce(c_delivery, 0) *150 + coalesce(count_bonus, 0) *500
END AS costs, SUM(taxes) AS tax
FROM
(SELECT creation_time::DATE AS date, order_id, unnest(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t1
LEFT JOIN
(SELECT product_id,name,price,  
CASE WHEN name IN ('сахар', 'сухарики', 'сушки', 'семечки', 
'масло льняное', 'виноград', 'масло оливковое', 
'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
'овсянка', 'макароны', 'баранина', 'апельсины', 
'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины')
THEN ROUND((price / 1.1)*0.1, 2)
ELSE ROUND((price / 1.2) *0.2, 2)
END AS taxes
FROM products) AS t2
ON t1.product_id = t2.product_id
LEFT JOIN
(SELECT creation_time::DATE AS date, COUNT(order_id) AS count_orders
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')
GROUP BY date) AS t3
ON t1.date = t3.date
LEFT JOIN
(SELECT time:: DATE AS date, COUNT(order_id) AS c_delivery 
FROM courier_actions
WHERE action = 'deliver_order'
GROUP BY date) AS t4
ON t1.date = t4.date
LEFT JOIN
(SELECT date, COUNT(courier_id)  AS count_bonus
FROM
(SELECT time::DATE AS date, courier_id, COUNT(order_id) AS count_delivery
FROM courier_actions
WHERE action = 'deliver_order'
GROUP BY date, courier_id
HAVING COUNT(order_id) > 4) AS t5
GROUP BY date) AS t6
ON t1.date = t6.date
GROUP BY t1.date, count_orders, c_delivery, count_bonus) AS t7) AS t8

9. Сперва рассмотрим метрику CAC (Customer Acquisition Cost), которая отражает затраты на привлечение одного покупателя.
На основе таблицы user_actions рассчитайте метрику CAC для двух рекламных кампаний.
На рекламную кампанию № 1 и  № 2 суммарно потратили 250 тысяч рублей. 
Списки id пользователей, пришедших после рекламной кампании № 1 и № 2 будут указаны непосредственно в коде

SELECT CASE 
WHEN 
user_id IN (8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
10105, 10122, 10134, 10135) THEN 'Кампания № 1'
WHEN 
user_id IN (8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131)
THEN 'Кампания № 2'
END AS ads_campaign,
ROUND(250000.0 / COUNT(DISTINCT user_id), 2) AS cac
FROM user_actions
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order') 
GROUP BY ads_campaign
ORDER BY ads_campaign
LIMIT 2

10. Рассчитайте ROI для каждого рекламного канала.

SELECT concat('Кампания № ', number) as ads_campaign, ROUND(100 * (SUM(price) - 250000.0) / 250000.0,2) AS roi
FROM
(SELECT user_id, order_id, time, action, 
CASE WHEN user_id IN (8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
10105, 10122, 10134, 10135) THEN 1
WHEN 
user_id IN (8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131)
THEN 2
END AS number
FROM user_actions
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t1
LEFT JOIN
(SELECT creation_time::DATE AS date, order_id, unnest(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t2
ON t1.order_id = t2.order_id
LEFT JOIN products
ON t2.product_id = products.product_id
GROUP BY number
HAVING number = 1 OR number = 2

11. Для каждой рекламной кампании посчитайте среднюю стоимость заказа привлечённых пользователей за первую неделю использования приложения с 1 по 7 сентября 2022 года.

SELECT concat('Кампания № ', number) as ads_campaign, ROUND(AVG(num),2) AS avg_check
FROM 
(SELECT number, user_id, SUM(price) / COUNT(DISTINCT t1.order_id) AS num
FROM
(SELECT user_id, order_id, time, action, 
CASE WHEN user_id IN (8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
10105, 10122, 10134, 10135) THEN 1
WHEN 
user_id IN (8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131)
THEN 2
END AS number
FROM user_actions
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')
AND time::DATE BETWEEN '2022-09-01' AND '2022-09-07'
) AS t1
LEFT JOIN
(SELECT creation_time::DATE AS date, order_id, unnest(product_ids) AS product_id
FROM orders
WHERE order_id NOT IN
(SELECT
order_id FROM user_actions
WHERE action = 'cancel_order')) AS t2
ON t1.order_id = t2.order_id
LEFT JOIN products
ON t2.product_id = products.product_id
GROUP BY number, user_id
HAVING number = 1 OR number = 2) AS t3
GROUP BY number
ORDER BY avg_check DESC

12. На основе данных в таблице user_actions рассчитайте показатель дневного Retention для всех пользователей, разбив их на когорты по дате первого взаимодействия с нашим приложением.
В результат включите четыре колонки: месяц первого взаимодействия, дату первого взаимодействия, количество дней, 
прошедших с даты первого взаимодействия (порядковый номер дня начиная с 0), и само значение Retention.

SELECT DATE_TRUNC('month', start_date)::DATE AS start_month,
start_date,  
date - start_date AS day_number,
ROUND( count(DISTINCT user_id)::DECIMAL / MAX(count(DISTINCT user_id)) OVER (PARTITION BY start_date), 2) AS retention
FROM
(SELECT user_id, order_id, time::DATE AS date, min(time) OVER (PARTITION BY user_id)::DATE AS start_date
FROM user_actions
) AS t1
GROUP BY date, start_date
ORDER BY start_date, day_number

13. Для каждой рекламной кампании посчитайте Retention 1-го и 7-го дня у привлечённых пользователей.

SELECT ads_campaign, start_date, day_number,
ROUND(users_count::DECIMAL / MAX(users_count) OVER(PARTITION BY ads_campaign), 2) AS retention
FROM
(SELECT 
concat('Кампания № ', number) as ads_campaign,
start_date,  
date - start_date AS day_number, count(DISTINCT user_id) AS users_count
FROM
(SELECT user_id, order_id, time::DATE AS date, min(time) OVER (PARTITION BY user_id)::DATE AS start_date,
CASE WHEN user_id IN (8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
10105, 10122, 10134, 10135) THEN 1
WHEN 
user_id IN (8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131)
THEN 2
END AS number
FROM user_actions) AS t1
WHERE number IN (1, 2) 
AND start_date = '2022-09-01' 
AND date - start_date IN (0,1,7)
GROUP BY number, date, start_date) AS t2

14. Для каждой рекламной кампании для каждого дня посчитайте две метрики:
1. Накопительный ARPPU.
2. Затраты на привлечение одного покупателя (CAC).

WITH
DIVIDING AS
(SELECT DISTINCT
           MIN(time::date) OVER (PARTITION BY user_id) AS start_date,
           time::date - MIN(time::date) OVER (PARTITION BY user_id) AS day_number,
           user_id,
           order_id,
           case when user_id IN   (8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
                                        8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
                                        8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
                                        8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
                                        9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
                                        9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
                                        9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
                                        9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
                                        9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
                                        9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
                                        9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
                                        9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
                                        9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
                                        10105, 10122, 10134, 10135) then 1
                     when user_id IN   (8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
                                        8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
                                        8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
                                        8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
                                        8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
                                        9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
                                        9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
                                        9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
                                        9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
                                        9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
                                        9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
                                        9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
                                        9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
                                        9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
                                        9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
                                        9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
                                        10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113,
                                        10131) then 2
                     else 0 end AS ads_campaign
        FROM user_actions) 

    SELECT 
          concat('Кампания № ', ads_campaign) as ads_campaign,
          CONCAT('Day ', CAST(day_number AS varchar(10))) AS day,
          round(sum(revenue_today) OVER (PARTITION by ads_campaign order by day_number) / Max_users , 2)  AS cumulative_arppu,
          cac
    FROM (SELECT 
          DIVIDING.ads_campaign,
          start_date,
          day_number,
          AVG(Max_users) AS Max_users,
          SUM(order_price) AS revenue_today,
          AVG(cac1) AS cac
        
    FROM DIVIDING 
    JOIN (SELECT order_id, SUM(price) AS order_price
    FROM
    (SELECT creation_time::date AS date,
            unnest(product_ids) AS product_id,
            order_id
    FROM orders
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) t
    
    JOIN products 
    USING (product_id)
    GROUP BY order_id) AS Shop 
    ON DIVIDING.order_id = Shop.order_id
    LEFT JOIN (SELECT  ads_campaign,
            COUNT (DISTINCT user_id) AS Max_users,
            round(250000.0 / COUNT(DISTINCT user_id), 2) AS cac1
    FROM DIVIDING
    WHERE ads_campaign IN (1, 2)
          AND order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY ads_campaign) AS CAC_count 
    ON DIVIDING.ads_campaign = CAC_count.ads_campaign
    WHERE DIVIDING.ads_campaign IN (1,2)
    GROUP BY DIVIDING.ads_campaign, start_date, day_number ) AS Revenue_today
