1. Рассчитайте количество заказов по дням, а также накопительную сумму заказов.

SELECT date,
       orders_count,
       sum(orders_count) OVER(ORDER BY date):: integer as orders_cum_count
FROM   (SELECT creation_time:: date as date,
               count(order_id) as orders_count
        FROM   orders
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')
        GROUP BY date) as t

2. Для каждого пользователя рассчитайте, сколько в среднем времени проходит между его заказами.

SELECT DISTINCT user_id,
                avg(time_diff):: integer as hours_between_orders
FROM   (SELECT user_id,
               (extract(epoch
        FROM   time - lag(time, 1)
        OVER(
        PARTITION BY user_id
        ORDER BY time))/3600) as time_diff
        FROM   user_actions
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')) as t
WHERE  time_diff is not null
GROUP BY user_id
ORDER BY user_id limit 1000

3. По данным таблицы user_actions посчитайте число первых и повторных заказов на каждую дату.

SELECT DISTINCT date(time) as date,
                order_type,
                count(order_id) as orders_count
FROM   (SELECT order_id,
               time,
               case when row_number() OVER(PARTITION BY user_id
                                           ORDER BY time) = 1 then 'Первый'
                    else 'Повторный' end as order_type
        FROM   user_actions
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')) as t
GROUP BY date, order_type
ORDER BY date, order_type

4. На основе информации в таблицах orders и products рассчитайте стоимость каждого заказа, ежедневную выручку сервиса и долю стоимости каждого заказа в ежедневной выручке, выраженную в процентах.

SELECT order_id,
       creation_time,
       order_price,
       daily_revenue,
       round(100 * order_price:: decimal/daily_revenue, 3) as percentage_of_daily_revenue
FROM   (SELECT DISTINCT order_id,
                        creation_time,
                        sum(price) OVER (PARTITION BY order_id) as order_price,
                        sum(price) OVER (PARTITION BY creation_time:: date) as daily_revenue
        FROM   (SELECT creation_time,
                       order_id,
                       unnest(product_ids) as product_id
                FROM   orders
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) as t1
            INNER JOIN products using(product_id)) as t2
ORDER BY creation_time::date desc, percentage_of_daily_revenue desc, order_id

5. На основе информации в таблицах orders и products рассчитайте ежедневную выручку сервиса и отразите её в колонке daily_revenue. 
Затем с помощью оконных функций и функций смещения посчитайте ежедневный прирост выручки. Прирост выручки отразите как в абсолютных значениях, так и в % относительно предыдущего дня. 

SELECT date,
       round(sum(price), 1) as daily_revenue,
       round(coalesce(sum(price) - lag(sum(price), 1) OVER(ORDER BY date(date)), 0),
             1) as revenue_growth_abs,
       round(coalesce(100 * sum(price):: decimal / lag(sum(price), 1) OVER(ORDER BY date(date)) - 100, 0),
             1) as revenue_growth_percentage
FROM   (SELECT order_id,
               creation_time::date as date,
               product_ids,
               unnest(product_ids) as product_id
        FROM   orders
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')) t1
    LEFT JOIN products using(product_id)
GROUP BY date
